openapi: 3.1.0
info:
  title: Advanced API
  version: 2.0.0
  description: |
    This API demonstrates advanced OpenAPI 3.1 features including:
    - JSON Schema Draft 2020-12 compatibility
    - Enhanced type definitions
    - Advanced schema composition
    - Improved examples and documentation
  contact:
    name: API Support Team
    email: support@example.com
    url: https://example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://example.com/terms

servers:
  - url: https://api.example.com/v2
    description: Production server
  - url: https://staging-api.example.com/v2
    description: Staging server
  - url: https://dev-api.example.com/v2
    description: Development server

paths:
  /products:
    get:
      summary: List products
      description: |
        Retrieve a paginated list of products. Supports filtering by category,
        price range, and availability status.
      operationId: listProducts
      tags:
        - Products
      parameters:
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
            enum: [electronics, clothing, books, home, sports]
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            minimum: 0
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            minimum: 0
        - name: available
          in: query
          description: Filter by availability
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response with products list
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              examples:
                success:
                  summary: Example products response
                  value:
                    products:
                      - id: "1"
                        name: "Wireless Headphones"
                        category: "electronics"
                        price: 99.99
                        available: true
                        tags: ["wireless", "bluetooth", "audio"]
                      - id: "2"
                        name: "Cotton T-Shirt"
                        category: "clothing"
                        price: 19.99
                        available: true
                        tags: ["cotton", "casual", "unisex"]
                    pagination:
                      page: 1
                      limit: 20
                      total: 150
                      hasNext: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new product
      description: Add a new product to the catalog
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
            examples:
              electronics:
                summary: Electronics product example
                value:
                  name: "Smartphone"
                  category: "electronics"
                  price: 599.99
                  description: "Latest smartphone with advanced features"
                  tags: ["smartphone", "mobile", "5G"]
              clothing:
                summary: Clothing product example
                value:
                  name: "Designer Jeans"
                  category: "clothing"
                  price: 89.99
                  description: "Premium quality designer jeans"
                  tags: ["jeans", "designer", "denim"]
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          headers:
            Location:
              description: URL of the created product
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{productId}:
    parameters:
      - $ref: '#/components/parameters/ProductId'
    get:
      summary: Get product by ID
      description: Retrieve detailed information about a specific product
      operationId: getProduct
      tags:
        - Products
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update product
      description: Update an existing product
      operationId: updateProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete product
      description: Remove a product from the catalog
      operationId: deleteProduct
      tags:
        - Products
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories:
    get:
      summary: List product categories
      description: Get all available product categories
      operationId: listCategories
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - category
        - price
      properties:
        id:
          type: string
          description: Unique product identifier
          example: "12345"
        name:
          type: string
          description: Product name
          minLength: 1
          maxLength: 200
          example: "Wireless Headphones"
        category:
          type: string
          description: Product category
          enum: [electronics, clothing, books, home, sports]
          example: "electronics"
        price:
          type: number
          description: Product price in USD
          minimum: 0
          exclusiveMinimum: true
          example: 99.99
        description:
          type: string
          description: Detailed product description
          maxLength: 1000
          example: "High-quality wireless headphones with noise cancellation"
        available:
          type: boolean
          description: Whether the product is currently available
          default: true
        tags:
          type: array
          description: Product tags for categorization and search
          items:
            type: string
          uniqueItems: true
          example: ["wireless", "bluetooth", "audio"]
        metadata:
          type: object
          description: Additional product metadata
          additionalProperties:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Product creation timestamp
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true

    ProductCreate:
      type: object
      required:
        - name
        - category
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        category:
          type: string
          enum: [electronics, clothing, books, home, sports]
        price:
          type: number
          minimum: 0
          exclusiveMinimum: true
        description:
          type: string
          maxLength: 1000
        available:
          type: boolean
          default: true
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
        metadata:
          type: object
          additionalProperties:
            type: string

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        category:
          type: string
          enum: [electronics, clothing, books, home, sports]
        price:
          type: number
          minimum: 0
          exclusiveMinimum: true
        description:
          type: string
          maxLength: 1000
        available:
          type: boolean
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
        metadata:
          type: object
          additionalProperties:
            type: string

    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Category identifier
        name:
          type: string
          description: Category display name
        description:
          type: string
          description: Category description

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - hasNext
      properties:
        page:
          type: integer
          description: Current page number
          minimum: 1
        limit:
          type: integer
          description: Number of items per page
          minimum: 1
          maximum: 100
        total:
          type: integer
          description: Total number of items
          minimum: 0
        hasNext:
          type: boolean
          description: Whether there are more pages available

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            violations:
              type: array
              description: List of validation violations
              items:
                type: object
                required:
                  - field
                  - message
                properties:
                  field:
                    type: string
                    description: Field that failed validation
                  message:
                    type: string
                    description: Validation error message
                  code:
                    type: string
                    description: Validation error code

  parameters:
    ProductId:
      name: productId
      in: path
      description: Product identifier
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
      example: "12345"

  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "BAD_REQUEST"
            message: "Invalid request parameters"
            timestamp: "2023-01-01T12:00:00Z"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2023-01-01T12:00:00Z"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "Insufficient permissions"
            timestamp: "2023-01-01T12:00:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"
            timestamp: "2023-01-01T12:00:00Z"

    ValidationError:
      description: Validation error - request body validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: "VALIDATION_ERROR"
            message: "Request validation failed"
            timestamp: "2023-01-01T12:00:00Z"
            violations:
              - field: "name"
                message: "Name is required"
                code: "REQUIRED"
              - field: "price"
                message: "Price must be greater than 0"
                code: "MIN_VALUE"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            timestamp: "2023-01-01T12:00:00Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

    OAuth2:
      type: oauth2
      description: OAuth2 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read:products: Read access to products
            write:products: Write access to products
            read:categories: Read access to categories

  examples:
    ProductExample:
      summary: Complete product example
      description: A comprehensive example of a product with all fields
      value:
        id: "prod-001"
        name: "Ultra HD Monitor"
        category: "electronics"
        price: 299.99
        description: "27-inch 4K Ultra HD monitor with HDR support"
        available: true
        tags: ["monitor", "4k", "hdr", "display"]
        metadata:
          brand: "TechCorp"
          model: "UHD-27"
          warranty: "3 years"
        createdAt: "2023-01-01T10:00:00Z"
        updatedAt: "2023-01-15T14:30:00Z"

security:
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth2: [read:products]

tags:
  - name: Products
    description: Product management operations
    externalDocs:
      description: Product management guide
      url: https://docs.example.com/products
  - name: Categories
    description: Category management operations

externalDocs:
  description: Complete API documentation
  url: https://docs.example.com/api